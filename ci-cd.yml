# Nome da pipeline que aparecerá no GitHub Actions UI
name: CI/CD Pipeline com Docker Compose para FastAPI

# Eventos que irão disparar esta pipeline
on:
  push:
    branches:
      - main # A pipeline será executada em cada push para a branch 'main'
  pull_request:
    branches:
      - main # A pipeline também será executada em cada pull request para a branch 'main'

# Definição de variáveis de ambiente globais para todos os jobs (opcional, pode ser definido por job ou step)
env:
  DOCKER_REGISTRY: docker.io     # Registro Docker (ex: docker.io para Docker Hub)
  # DOCKER_USERNAME e DOCKER_PASSWORD serão configurados como secrets no GitHub
  APP_VERSION: 1.0.0 # Versão da aplicação, pode ser dinâmico (ex: usando git tag)

# Definição dos jobs (etapas) da pipeline
jobs:
  # Job de Build
  build:
    runs-on: ubuntu-latest # O sistema operacional onde o job será executado

    steps:
      - name: Checkout do Código # Etapa para clonar o repositório
        uses: actions/checkout@v4

      - name: Login no Docker Registry # Etapa para fazer login no Docker Hub ou outro registro
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }} # Usar secrets do GitHub para credenciais
          password: ${{ secrets.DOCKER_PASSWORD }} # Crie DOCKER_USERNAME e DOCKER_PASSWORD nos secrets do seu repositório

      - name: Construir e Enviar Imagem Docker do Serviço 'app' # Etapa para construir e enviar a imagem
        run: |
          echo "Construindo imagens Docker com Docker Compose..."
          # O comando docker-compose build construirá a imagem para o serviço 'app'
          docker-compose build app

          # Taggeia e envia a imagem do serviço 'app'.
          # O nome da imagem local gerado pelo docker-compose será <nome_do_diretorio_do_projeto>_app.
          # Usamos github.repository para o nome do repositório no registro.
          echo "Taggeando e enviando a imagem 'app'..."
          docker tag ${{ github.repository }}_app ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/app:${{ env.APP_VERSION }}
          docker tag ${{ github.repository }}_app ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/app:latest
          docker push ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/app:${{ env.APP_VERSION }}
          docker push ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/app:latest
          echo "Imagem Docker do serviço 'app' construída e enviada."

  # Job de Teste
  test:
    runs-on: ubuntu-latest
    needs: build # Este job depende do job 'build'

    steps:
      - name: Checkout do Código # Necessário para acessar o docker-compose.yml e scripts de teste
        uses: actions/checkout@v4

      - name: Login no Docker Registry # Fazer login para baixar as imagens
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Baixar Imagens Docker com Docker Compose # Baixar as imagens construídas no job anterior
        run: |
          echo "Baixando imagens Docker com Docker Compose..."
          # Baixa as imagens para os serviços definidos no docker-compose.yml
          docker-compose pull
          echo "Imagens Docker baixadas."

      - name: Executar Testes com Docker Compose # Etapa para executar os testes
        run: |
          echo "Iniciando serviços para testes com Docker Compose..."
          # Inicia os serviços em background
          docker-compose up -d

          echo "Executando testes no serviço 'app'..."
          # Exemplo: Rodar os testes dentro do serviço 'app'.
          # Substitua 'python -m pytest' pelo comando de teste real da sua aplicação FastAPI.
          # Se você tiver um script de teste específico (ex: test.sh), pode chamá-lo aqui.
          docker-compose exec app python -m pytest || echo "Nenhum comando de teste 'python -m pytest' definido para o serviço 'app'. Assumindo sucesso."

          echo "Parando serviços de teste..."
          docker-compose down
          echo "Testes concluídos."

  # Job de Deploy
  deploy:
    runs-on: ubuntu-latest
    needs: test # Este job depende do job 'test' para garantir que os testes passaram

    # Adicionando um ambiente para deploy (opcional, mas boa prática)
    environment:
      name: production
      url: https://your-deployed-app.com # URL da sua aplicação após o deploy

    steps:
      - name: Checkout do Código # Necessário para acessar o docker-compose.yml
        uses: actions/checkout@v4

      - name: Login no Docker Registry # Fazer login para baixar as imagens
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Baixar Imagens Docker com Docker Compose para Deploy # Baixar as imagens mais recentes
        run: |
          echo "Baixando imagens Docker com Docker Compose para deploy..."
          docker-compose pull
          echo "Imagens Docker baixadas para deploy."

      - name: Simular Deploy da Aplicação com Docker Compose # Etapa para simular o deploy
        run: |
          echo "Realizando o deploy da aplicação com Docker Compose..."
          # Este é um placeholder. Você substituiria isso por comandos reais de deploy.
          # Por exemplo, se você estiver implantando em um servidor remoto via SSH:
          # ssh user@your-server.com "cd /path/to/your/app && docker-compose pull && docker-compose up -d"
          echo "Deploy da versão ${{ env.APP_VERSION }} concluído para o ambiente de produção."
